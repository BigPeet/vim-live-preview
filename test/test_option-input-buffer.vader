Include: setup.vader

Execute (Input Test Helpers):
  function! BufferTest(bufnum)
    return [a:bufnum]
  endfunction
  command! -nargs=1 BufferTestCmd echo join(BufferTest(<f-args>), "\n")

  function! InputTest(is_async, expected, ...)
    exec "call vlp#EnterPreviewMode(" . join(a:000, ',') . ")"
    if a:is_async
      sleep 200m " sleep since async jobs might need a moment
    endif
    AssertEqual a:expected,
      \ getbufoneline(bufnr(g:def_preview_bufname), 1)
  endfunction


Given (Input Text):
  "1. Line"
  '2. Line'
  3. Line

# "buffer" Tests

Execute (Input Buffer: FuncRef):
  let bufnr = string(bufnr())
  call InputTest(0, bufnr, 'function("BufferTest")', {"input": "buffer"})
  AssertEqual "function('BufferTest')(" . bufnr . ')', vlp#LastFunctor()

Execute (Input Buffer: Function Name):
  let bufnr = string(bufnr())
  call InputTest(0, bufnr, "'BufferTest'", {"input": "buffer"})
  AssertEqual "function('BufferTest')(" . bufnr . ')', vlp#LastFunctor()

Execute (Input Buffer: Vim Command):
  let bufnr = string(bufnr())
  call InputTest(0, bufnr, "':BufferTestCmd'", {"input": "buffer"})
  AssertEqual "BufferTestCmd " . bufnr, vlp#LastFunctor()

Execute (Input Buffer: Shell Command Job):
  let bufnr = string(bufnr())
  call InputTest(1, bufnr, "':!echo'", {"input": "buffer"})
  AssertEqual "echo " . bufnr, vlp#LastFunctor()
  VLPLeave
  call InputTest(1, bufnr, "':!echo <buffer>'", {"input": "buffer"})
  AssertEqual "echo " . bufnr, vlp#LastFunctor()

Execute (Input Buffer: Shell Command):
  let bufnr = string(bufnr())
  call InputTest(0, bufnr, "':!echo'", {"input": "buffer", "use_jobs": v:false})
  AssertEqual "echo " . bufnr, vlp#LastFunctor()
  VLPLeave
  call InputTest(0, bufnr, "':!echo <buffer>'", {"input": "buffer", "use_jobs": v:false})
  AssertEqual "echo " . bufnr, vlp#LastFunctor()

Execute (Set Input Buffer Globally):
  let g:vlp_input = "buffer"
  call InputTest(0, string(bufnr()), 'function("BufferTest")')
  unlet g:vlp_input
